{"version":3,"sources":["tasks.js"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,MAAM,QAAQ,IAAI,MAAM,UAAN,CAAiB,OAArB,CAAR,CAAb;;AAEA,IAAI,OAAO,QAAP,EAAiB;;;AAGjB,WAAO,OAAP,CAAe,OAAf,EAAwB,SAAS,gBAAT,GAA4B;AAChD,eAAO,MAAM,IAAN,CAAW;AACd,iBAAK,CACD,EAAC,SAAS,EAAC,KAAK,IAAL,EAAV,EADA,EAED,EAAC,OAAO,KAAK,MAAL,EAFP,CAAL;SADG,CAAP,CADgD;KAA5B,CAAxB,CAHiB;CAArB;;AAaA,OAAO,OAAP,CAAe;AACX,mBAAe,IAAf,EAAqB;AACjB,cAAM,IAAN,EAAY,MAAZ;;;AADiB,YAIb,CAAE,OAAO,MAAP,EAAF,EAAmB;AACnB,kBAAM,IAAI,OAAO,KAAP,CAAa,gBAAjB,CAAN,CADmB;SAAvB;;AAIA,cAAM,MAAN,CAAa;AACT,gBADS;AAET,uBAAW,IAAI,IAAJ,EAAX;AACA,mBAAO,OAAO,MAAP,EAAP;AACA,sBAAU,OAAO,IAAP,GAAc,QAAd;SAJd,EARiB;KAArB;AAeA,mBAAe,MAAf,EAAuB;AACnB,cAAM,MAAN,EAAc,MAAd,EADmB;;AAGnB,cAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP,CAHa;;AAKnB,YAAI,KAAK,OAAL,IAAgB,KAAK,KAAL,KAAe,OAAO,MAAP,EAAf,EAAgC;;AAEhD,kBAAM,IAAI,OAAO,KAAP,CAAa,gBAAjB,CAAN,CAFgD;SAApD;KALJ;AAUA,uBAAmB,MAAnB,EAA2B,UAA3B,EAAuC;AACnC,cAAM,MAAN,EAAc,MAAd,EADmC;AAEnC,cAAM,UAAN,EAAkB,OAAlB,EAFmC;;AAInC,cAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP,CAJ6B;AAKnC,YAAI,KAAK,OAAL,IAAgB,KAAK,KAAL,KAAe,OAAO,MAAP,EAAf,EAAgC;;AAEhD,kBAAM,IAAI,OAAO,KAAP,CAAa,gBAAjB,CAAN,CAFgD;SAApD;KALJ;AAUA,uBAAmB,MAAnB,EAA2B,YAA3B,EAAyC;AACrC,cAAM,MAAN,EAAc,MAAd,EADqC;AAErC,cAAM,YAAN,EAAoB,OAApB,EAFqC;;AAIrC,cAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP;;;AAJ+B,YAOjC,KAAK,KAAL,KAAe,OAAO,MAAP,EAAf,EAAgC;AAChC,kBAAM,IAAI,OAAO,KAAP,CAAa,gBAAjB,CAAN,CADgC;SAApC;;AAIA,cAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,SAAS,YAAT,EAAR,EAAvB,EAXqC;KAAzC;CApCJ","file":"tasks-compiled.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n    // This code only runs on the server\n    // Only publish tasks that are public or belong to the current user\n    Meteor.publish('tasks', function tasksPublication() {\n        return Tasks.find({\n            $or: [\n                {private: {$ne: true}},\n                {owner: this.userId},\n            ],\n        });\n    });\n}\n\nMeteor.methods({\n    'tasks.insert'(text) {\n        check(text, String);\n\n        // Make sure the user is logged in before inserting a task\n        if (! Meteor.userId()) {\n            throw new Meteor.Error('not-authorized');\n        }\n\n        Tasks.insert({\n            text,\n            createdAt: new Date(),\n            owner: Meteor.userId(),\n            username: Meteor.user().username,\n        });\n    },\n    'tasks.remove'(taskId) {\n        check(taskId, String);\n\n        const task = Tasks.findOne(taskId);\n\n        if (task.private && task.owner !== Meteor.userId()) {\n            // If the task is private, make sure only the owner can delete it\n            throw new Meteor.Error('not-authorized');\n        }\n    },\n    'tasks.setChecked'(taskId, setChecked) {\n        check(taskId, String);\n        check(setChecked, Boolean);\n\n        const task = Tasks.findOne(taskId);\n        if (task.private && task.owner !== Meteor.userId()) {\n            // If the task is private, make sure only the owner can check it off\n            throw new Meteor.Error('not-authorized');\n        }\n    },\n    'tasks.setPrivate'(taskId, setToPrivate) {\n        check(taskId, String);\n        check(setToPrivate, Boolean);\n\n        const task = Tasks.findOne(taskId);\n\n        // Make sure only the task owner can make a task private\n        if (task.owner !== Meteor.userId()) {\n            throw new Meteor.Error('not-authorized');\n        }\n\n        Tasks.update(taskId, { $set: { private: setToPrivate } });\n    },\n});"]}